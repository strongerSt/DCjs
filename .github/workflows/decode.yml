name: Decode Script

on:
  push:
    branches:
      - main
  issues:
    types: [opened, edited]

jobs:
  decode:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup folders
        run: |
          mkdir -p input
          mkdir -p output
          echo "Repository structure after setup:"
          ls -la

      - name: Check for input file in push event
        if: github.event_name == 'push'
        run: |
          # 检查是否已有输入文件
          if [ -f "input/input.js" ]; then
            echo "Input file exists"
          else
            echo "Creating sample input file for testing"
            echo "// Sample input file for testing" > input/input.js
          fi
          ls -la input/

      - name: Process issue data
        if: github.event_name == 'issues'
        id: issue-data
        uses: actions/github-script@v6
        with:
          script: |
            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const body = issue.data.body;
            if (!body) return;
            
            // 解析文件类型
            const fileTypeMatch = body.match(/\*\*文件类型:\*\* `(.+?)`/);
            const fileType = fileTypeMatch ? fileTypeMatch[1] : 'js';
            
            // 提取代码
            const codeMatch = body.match(/```[\s\S]*?\n([\s\S]*?)```/);
            const code = codeMatch ? codeMatch[1] : '';
            
            // 写入文件到正确的位置
            const fs = require('fs');
            fs.writeFileSync(`input/input.${fileType}`, code);
            
            // 输出变量
            core.exportVariable('FILE_TYPE', fileType);
            core.setOutput('file_type', fileType);

      - name: Execute Python script
        run: python src/decode.py
        continue-on-error: true

      - name: Debug environment
        run: |
          echo "Current directory structure:"
          ls -la
          echo "Input directory:"
          ls -la input/ || echo "Input directory not found"
          echo "Output directory:"
          ls -la output/ || echo "Output directory not found"
          echo "src directory:"
          ls -la src/ || echo "src directory not found"
          echo "npm environment:"
          npm -v
          node -v
          cat package.json || echo "package.json not found"

      - name: Install dependencies
        run: npm install

      - name: Run decode for issues
        if: github.event_name == 'issues'
        run: |
          FILE_TYPE="${{ env.FILE_TYPE || 'js' }}"
          echo "File type: $FILE_TYPE"
          echo "Running decode for issue with input file: input/input.$FILE_TYPE"
          npm run decode -- -i input/input.$FILE_TYPE -o output/output.$FILE_TYPE
          ls -la output/

      - name: Run decode for push
        if: github.event_name == 'push'
        run: |
          echo "Running decode for push event"
          # 直接使用明确的参数，不使用方括号
          npm run decode -- -i input/input.js -o output/output.js
          # 如果上面失败，尝试不带参数运行
          if [ $? -ne 0 ]; then
            echo "Trying without parameters"
            npm run decode
          fi
          ls -la output/

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "action"

      - name: Save outputs
        run: |
          echo "Adding output files to git"
          git status
          git add output/* || echo "No output files to add"
          git commit -m "Add decoded output files" || echo "No changes to commit"
          git push origin main || echo "No changes to push"

      - name: Add comment to issue
        if: github.event_name == 'issues'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const fileType = process.env.FILE_TYPE || 'js';
            let content = '';
            
            try {
              const outputFile = `output/output.${fileType}`;
              if (fs.existsSync(outputFile)) {
                content = fs.readFileSync(outputFile, 'utf8');
              } else {
                // 尝试查找其他可能的输出文件
                if (fs.existsSync('output') && fs.statSync('output').isDirectory()) {
                  const files = fs.readdirSync('output');
                  if (files.length > 0) {
                    content = fs.readFileSync(`output/${files[0]}`, 'utf8');
                  } else {
                    content = "未找到输出文件";
                  }
                } else {
                  content = "输出目录不存在";
                }
              }
            } catch (e) {
              content = `解密时出错: ${e.message}`;
            }
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `## 解密结果\n\n\`\`\`${fileType}\n${content}\n\`\`\``
            });